from os import remove
from base64 import b64encode, b64decode
from cv2 import imread, QRCodeDetector  # type: ignore
from pathlib import Path

def read_qr(b64_str_from_url: str) -> str:
    '''extract data from base64 encoded qr code image'''
    b64_str: str = b64_str_from_url.replace(' ', '+')
    with open(".qr", "wb") as img:
        img.write(b64decode(b64_str))
    qr_to_read = imread(".qr")
    remove(".qr")
    detector = QRCodeDetector()
    data, _, _ = detector.detectAndDecode(qr_to_read)
    return data

def test_read_qr() -> None:
    # 0
    b64_encoded_qr_str0: str = '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'
    qr_data0: str = 'BITCOIN:BC1PJEXYAT44C8S5RKC4AVY9DWUCZH82VAXNCNFRAN8PDM8S4D3J8CESPLD4HM'
    decoded_qr_data0: str = read_qr(b64_encoded_qr_str0)
    assert(decoded_qr_data0 == qr_data0)

    # 1
    qr_png: Path = Path('dummy_qrs/qr.png')
    b64_encoded_qr_str1: str = b64encode(qr_png.read_bytes()).decode()
    qr_data1: str = 'BITCOIN:BC1PJEXYAT44C8S5RKC4AVY9DWUCZH82VAXNCNFRAN8PDM8S4D3J8CESPLD4HM'
    decoded_qr_data1: str = read_qr(b64_encoded_qr_str1)
    assert(decoded_qr_data1 == qr_data1)
